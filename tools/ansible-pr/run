#!/usr/bin/env ruby
# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

$LOAD_PATH.unshift File.dirname(__FILE__)
Dir.chdir(File.join(File.dirname(__FILE__), "..", ".."))

require 'optparse'
require 'compile/core'
include Compile::Core

##########################################################
# Default Options
#
ANSIBLE_URL = 'git@github.com:ansible/ansible.git'
MAGICIAN_GIT = 'git@github.com:modular-magician/ansible.git'

IGNORED_MODULES = [
  'lib/ansible/modules/cloud/google/gcp_backend_service.py',
  'lib/ansible/modules/cloud/google/gcp_healthcheck.py',
  'lib/ansible/modules/cloud/google/gcp_target_proxy.py',
  'lib/ansible/modules/cloud/google/gcp_url_map.py',
]

ADDITIONAL_FILES = [
  'lib/ansible/module_utils/gcp_utils.py',
  'lib/ansible/utils/module_docs_fragments/gcp.py',
]

@options = {
  directory: "build/ansible/",
  ansible_version: '2.7'
}
###########################################################
# Functions

def git_run(cmd, silent = false, opts = @options)
  silent_cmd = silent ? '>/dev/null' : ''
  `pushd #{opts[:directory]} >/dev/null; #{cmd}#{silent_cmd} 2>&1; popd #{opts[:directory]} > /dev/null`
end

# Check that remotes are in order
def check_remotes(opts = @options)
  # Check git remotes
  remotes = git_run("git remote -v", false, opts)
  remotes = remotes.split("\n")
                   .map { |line| line.split("\t") }
                   .map { |line| { line[0] => line[1].split(" ").first } }
                   .reduce({}, :merge)
  raise "Origin git remote should be set" unless remotes["origin"]
  raise "Upstream git remote should be #{ANSIBLE_URL}" unless remotes["upstream"] == ANSIBLE_URL
end

def get_all_modules(remote)
  git_run("git fetch #{remote} devel", true)
  git_run("git checkout #{remote}/devel", true)
  files = git_run("git ls-files -- lib/ansible/modules/cloud/google/gcp_*")
  files.split("\n")
       .reject { |line| IGNORED_MODULES.include?(line) }
end

def check_if_different(file, remote1, remote2)
  @files ||= git_run("git diff --name-only #{remote1}/devel #{remote2}/devel")
  @files.split("\n")
        .include?(file)
end

def checkout_file(file)
  git_run("git checkout magician/devel -- #{file}", true)
end

def commit_message(mod_name)
  file = "lib/ansible/modules/cloud/google/#{mod_name}.py"
  status = git_run("git cat-file -e upstream/devel:#{file}")
  if status.include?('fatal')
    "New GCP Module: #{mod_name}"
  else
    "Bug fixes for #{mod_name}"
  end
end
#############################################################
# Main
#############################################################

OptionParser.new do |opts|
  opts.banner = "Usage: run [options]"

  opts.on("--dir", "--directory", "Ansible repo location") do |v|
    @options[:directory] = v
  end

  opts.on("-v", "--version", "Ansible version") do |v|
    @options[:ansible_version] = v
  end
end.parse!

# Check if everything is installed properly.
raise "Please install the hub CLI" unless `hub`
check_remotes

# Add Magician Git repo
git_run("git remote add magician #{MAGICIAN_GIT}", true)
git_run("git fetch upstream devel", true)

puts "Everything is setup properly"

# Check to see which additional files need to be placed in new PRs.
changed_files = []
ADDITIONAL_FILES.each { |file| changed_files << file if check_if_different(file, "magician", "upstream") }

puts "Files noticed in these additional files: #{changed_files.join(', ')}"

# Find list of all modules.
files = get_all_modules('magician')

# Create a PR for each file.
files.each do |mod|
  mod_name = /lib\/ansible\/modules\/cloud\/google\/([a-z_]*)\.py/.match(mod.strip)[1]
  puts "Building PR for #{mod_name}"

  git_run("git checkout upstream/devel", true)
  git_run("git branch -D #{mod_name}", true)
  git_run("git checkout -b #{mod_name}", true)

  # Checkout the files
  checkout_file("lib/ansible/modules/cloud/google/#{mod_name}.py")
  checkout_file("test/integration/targets/#{mod_name}/")
  changed_files.each { |file| checkout_file(file) }

  # Make a commit
  message = commit_message(mod_name)
  git_run("git commit -m \"#{message}\"", true)
  puts "PR built for #{mod_name}"

  # Create PR message.
  File.write("tools/ansible-pr/templates/#{mod_name}",
             lines(compile_file({
    mod_name: mod_name,
    new: message.include?("New GCP"),
    ansible_version: @options[:ansible_version],
    commit_msg: message
  }, 'tools/ansible-pr/template.md.erb')))
  #
  # Create PR
end
